//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Content/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""32086c88-a71b-4378-a834-f829de9dea26"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d4d5e205-3af0-45a8-8c3d-d068fa4faa1c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d4bbca33-fab6-4cfc-8dad-0849363dc952"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AbilityPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""6e6d17a7-7551-4dbe-bd5f-312b07cf0349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilitySecondary"",
                    ""type"": ""Button"",
                    ""id"": ""53fbbddc-4ba1-4c09-9bea-4fac1e8c2aa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityTertiary"",
                    ""type"": ""Button"",
                    ""id"": ""64a1befd-b965-4b47-bc5b-c1ae6431f2df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Evade"",
                    ""type"": ""Button"",
                    ""id"": ""7cc9d5ee-9930-4f44-9b13-13d6ee8d720d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""d23e1696-3a10-4b0c-bca8-a15d22425228"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleAim"",
                    ""type"": ""Button"",
                    ""id"": ""32535e32-6c7f-4f54-b478-c20718291bc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ElevationAim"",
                    ""type"": ""Button"",
                    ""id"": ""c940c8f6-eca0-48b3-8128-aa513608a130"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrecisionAiming"",
                    ""type"": ""Button"",
                    ""id"": ""80b660d7-66fd-4c71-a17c-3276d1560e22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a0fd600c-11cb-4b47-9a7c-a77bede679c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""18315462-f7fe-4de1-9d46-11993e6293ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ba5761b7-b3d1-409c-b493-b21a9d5e0eed"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b0d9c99-a80e-4ac3-9fc3-1f2c7d654a89"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b6488146-ee0a-4d66-9fbb-4446462c2bc6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d49d4ac2-0169-43ad-9675-d98388182f9f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52189faf-678d-4449-98e3-35db0cace55b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c81f1aef-0efa-4bfc-a722-feb121c8516a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.33,max=1)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a2fc10-9232-43ed-99f3-61c87dad8e0d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70ee0fd9-6ba2-4b4b-a72b-a9982f78cf25"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AbilityPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3327ea1f-7067-4fea-9c92-c6febbc21fc5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Evade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6d53ab5-d663-4da1-9076-80344d0ea7a0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilitySecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3330840-811e-40b8-b69f-f8ef066b5044"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01a622cf-6cd3-4b2f-a25d-32dcd238c46f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityTertiary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a113519-1667-439f-83cb-128fa31a0123"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d961a3a-ebef-44ae-8464-3e53cb333c46"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6f26c3f-0719-4137-a229-b314ef2bee1a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElevationAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6985a7b1-38b5-4322-90e6-0cbbc8b272eb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElevationAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9505dd7c-2933-4618-9239-f798a42c4bb6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElevationAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualSenseGamepadHID>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_AbilityPrimary = m_Player.FindAction("AbilityPrimary", throwIfNotFound: true);
        m_Player_AbilitySecondary = m_Player.FindAction("AbilitySecondary", throwIfNotFound: true);
        m_Player_AbilityTertiary = m_Player.FindAction("AbilityTertiary", throwIfNotFound: true);
        m_Player_Evade = m_Player.FindAction("Evade", throwIfNotFound: true);
        m_Player_Block = m_Player.FindAction("Block", throwIfNotFound: true);
        m_Player_ToggleAim = m_Player.FindAction("ToggleAim", throwIfNotFound: true);
        m_Player_ElevationAim = m_Player.FindAction("ElevationAim", throwIfNotFound: true);
        m_Player_PrecisionAiming = m_Player.FindAction("PrecisionAiming", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_AbilityPrimary;
    private readonly InputAction m_Player_AbilitySecondary;
    private readonly InputAction m_Player_AbilityTertiary;
    private readonly InputAction m_Player_Evade;
    private readonly InputAction m_Player_Block;
    private readonly InputAction m_Player_ToggleAim;
    private readonly InputAction m_Player_ElevationAim;
    private readonly InputAction m_Player_PrecisionAiming;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @AbilityPrimary => m_Wrapper.m_Player_AbilityPrimary;
        public InputAction @AbilitySecondary => m_Wrapper.m_Player_AbilitySecondary;
        public InputAction @AbilityTertiary => m_Wrapper.m_Player_AbilityTertiary;
        public InputAction @Evade => m_Wrapper.m_Player_Evade;
        public InputAction @Block => m_Wrapper.m_Player_Block;
        public InputAction @ToggleAim => m_Wrapper.m_Player_ToggleAim;
        public InputAction @ElevationAim => m_Wrapper.m_Player_ElevationAim;
        public InputAction @PrecisionAiming => m_Wrapper.m_Player_PrecisionAiming;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @AbilityPrimary.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityPrimary;
                @AbilityPrimary.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityPrimary;
                @AbilityPrimary.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityPrimary;
                @AbilitySecondary.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilitySecondary;
                @AbilitySecondary.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilitySecondary;
                @AbilitySecondary.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilitySecondary;
                @AbilityTertiary.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityTertiary;
                @AbilityTertiary.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityTertiary;
                @AbilityTertiary.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbilityTertiary;
                @Evade.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEvade;
                @Evade.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEvade;
                @Evade.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEvade;
                @Block.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlock;
                @ToggleAim.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleAim;
                @ToggleAim.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleAim;
                @ToggleAim.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleAim;
                @ElevationAim.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevationAim;
                @ElevationAim.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevationAim;
                @ElevationAim.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnElevationAim;
                @PrecisionAiming.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrecisionAiming;
                @PrecisionAiming.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrecisionAiming;
                @PrecisionAiming.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrecisionAiming;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @AbilityPrimary.started += instance.OnAbilityPrimary;
                @AbilityPrimary.performed += instance.OnAbilityPrimary;
                @AbilityPrimary.canceled += instance.OnAbilityPrimary;
                @AbilitySecondary.started += instance.OnAbilitySecondary;
                @AbilitySecondary.performed += instance.OnAbilitySecondary;
                @AbilitySecondary.canceled += instance.OnAbilitySecondary;
                @AbilityTertiary.started += instance.OnAbilityTertiary;
                @AbilityTertiary.performed += instance.OnAbilityTertiary;
                @AbilityTertiary.canceled += instance.OnAbilityTertiary;
                @Evade.started += instance.OnEvade;
                @Evade.performed += instance.OnEvade;
                @Evade.canceled += instance.OnEvade;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @ToggleAim.started += instance.OnToggleAim;
                @ToggleAim.performed += instance.OnToggleAim;
                @ToggleAim.canceled += instance.OnToggleAim;
                @ElevationAim.started += instance.OnElevationAim;
                @ElevationAim.performed += instance.OnElevationAim;
                @ElevationAim.canceled += instance.OnElevationAim;
                @PrecisionAiming.started += instance.OnPrecisionAiming;
                @PrecisionAiming.performed += instance.OnPrecisionAiming;
                @PrecisionAiming.canceled += instance.OnPrecisionAiming;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAbilityPrimary(InputAction.CallbackContext context);
        void OnAbilitySecondary(InputAction.CallbackContext context);
        void OnAbilityTertiary(InputAction.CallbackContext context);
        void OnEvade(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnToggleAim(InputAction.CallbackContext context);
        void OnElevationAim(InputAction.CallbackContext context);
        void OnPrecisionAiming(InputAction.CallbackContext context);
    }
}
